#!/bin/bash

set -ueo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

destination=$1

payload=$(cat <&0)

version=$(jq --raw-output '.version.version // empty' <<< "${payload}")
if [[ -z ${version} ]]; then
    echo >&2 "Version info 'version' is missing"
    exit 1
fi

system=$(jq -r '.source.system // empty' <<< "${payload}")
if [[ -z ${system} ]]; then
    echo >&2 "Source parameter 'system' is missing"
    exit 1
fi

architecture=$(jq -r '.source.architecture // empty' <<< "${payload}")
if [[ -z ${architecture} ]]; then
    echo >&2 "Source parameter 'architecture' is missing"
    exit 1
fi

distribution=$(jq -r '.source.distribution // empty' <<< "${payload}")
if [[ -z ${distribution} ]]; then
    echo >&2 "Source parameter 'distribution' is missing"
    exit 1
fi

>&2 echo "Fetching assets v${version}"

pushd "${destination}" > /dev/null
echo "${version}"       > version

tarball_url="https://github.com/mongodb/mongo/archive/refs/tags/r${version}.tar.gz"

tarball_url=$(
        curl --silent --fail --show-error --location \
                --url "https://www.mongodb.com/download-center/community/releases" \
            | tr '<' '\n' \
            | sed -ne 's|^.*href="\([^"]*mongodb-[^"]*\.tgz\)">.*|\1|p' \
            | grep -e "mongodb-${system}-${architecture}-${distribution}-${version}"
)

if [[ -z ${tarball_url} ]]; then
    echo >&2 "No tarball available for $system $architecture $distribution $version"
    exit 1
fi

echo >&2 "Downloading ${tarball_url}"
curl  --silent --fail --show-error --location --remote-name \
    --url "${tarball_url}"

curl  --silent --fail --show-error --location --output "sha256" \
    --url "${tarball_url}.sha256"
sha256=$(< sha256)
sha256sum --check <<< "${sha256}"


jq --null-input \
    --arg "version" "${version}" \
    '{ version: { version: $version } }' \
    >&3
